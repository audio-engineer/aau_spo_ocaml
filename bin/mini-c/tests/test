#!/bin/bash

shopt -s nullglob

# Made by Jean-Christophe Filliâtre
# Modified by Léon Gondelman
# 2024
# script for tests for the compilation projet

option=$1
compilo=$2
score=0
max=0
verbose=0


echo "Test de $2"

echo

rm -f syntax/bad/testfile-*.c
rm -f syntax/good/testfile-*.c
rm -f typing/bad/testfile-*.c
rm -f typing/good/testfile-*.c
ocamllex split.mll
ocaml split.ml syntax/bad/bad.split
ocaml split.ml syntax/good/good.split
ocaml split.ml typing/bad/bad.split
ocaml split.ml typing/good/good.split

# all tests with gcc
test_gcc() {
for f in syntax/bad/*.c; do
    if gcc -c $f > /dev/null 2>&1 ; then
      echo "success of gcc -c on $f"; exit 1
    fi
done

for f in typing/good/*.c exec/*.c exec-fail/*.c; do
    gcc -c $f > /dev/null 2>&1 ||
     (echo "failure of gcc on $f"; exit 1)
done
for f in typing/bad/*.c; do
    if gcc $f > /dev/null 2>&1 ; then
      echo "success of gcc on $f"; exit 1
    fi
done
for f in exec/*.c; do
    if test $f == exec/sizeof1.c; then continue; fi
    if test $f == exec/sizeof2.c; then continue; fi
    echo "test gcc sur $f"
    expected=exec/`basename $f .c`.out
    echo "#include <stdio.h>" > input.c
    echo "#include <unistd.h>" >> input.c
    cat $f >> input.c
    if gcc input.c > /dev/null 2>&1 ; then
      ./a.out > out
      if ! cmp --quiet out $expected; then
          echo "bad output of gcc on $f"; exit 1
      fi
    else
      echo "failure of gcc -c on $f"; exit 1
    fi
done
}

compile () {
if [[ $verbose != 0 ]]; then
  echo Compile $1 $2
  $compilo $1 $2;
else
  $compilo $1 $2 > /dev/null 2>&1;
fi;
}


# part 1 : tests of syntax analysis

partie1 () {

score=0
max=0

echo "Part 1"

# tests that should fail
echo -n "bad "
for f in syntax/bad/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"0")
	echo
	echo "FAILURE on "$f" (should have failed)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

# good
echo -n "good "
for f in syntax/good/*.c typing/bad/*.c typing/good/*.c exec/*.c exec-fail/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"1")
	echo
	echo "FAILURE on "$f" (should have passed)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo -n "Syntax : $score/$max : $percent%"; }

# partie 2 : tests of semantic analysis (incl. typing)


partie2 () {
echo
echo "Part 2: Type-checking"

score=0
max=0

# bad
echo -n "bad "
for f in typing/bad/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --type-only $f;
    case $? in
	"0")
	echo
	echo "FAILURE on "$f" (should have failed)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

# good
echo -n "good "
for f in typing/good/*.c exec/*.c exec-fail/*.c; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --type-only $f;
    case $? in
	"1")
	echo
	echo "FAILURE on "$f" (should have passed)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "FAILURE on "$f" (for a bad reason)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo    "Typing  : $score/$max : $percent%";
}


# partie 3 : tests d'exécution

# partie3 () {

# score_comp=0
# score_out=0
# score_test=0
# max=0

# echo
# echo "Partie 3"
# echo "Execution normale"
# echo "-----------------"

# # timeout="why3-cpulimit 30 0 -h"

# for f in exec/*.c; do
#     echo -n "."
#     asm=exec/`basename $f .c`.s
#     rm -f $asm
#     expected=exec/`basename $f .c`.out
#     max=`expr $max + 1`;
#     if compile $f; then
# 	rm -f out
# 	score_comp=`expr $score_comp + 1`;
# 	if gcc -no-pie $asm && ./a.out > out; then
# 	    score_out=`expr $score_out + 1`;
# 	    if cmp --quiet out $expected; then
# 		score_test=`expr $score_test + 1`;
# 	    else
# 		echo
# 		echo "ECHEC : mauvaise sortie pour $f"
# 	    fi
# 	else
# 		echo
# 		echo "ECHEC du code produit pour $f"
# 	fi
#     else
# 	echo
# 	echo "ECHEC de la compilation sur $f (devrait réussir)"
#     fi
# done
# echo

# echo "Execution conduisant à un échec"
# echo "-------------------------------"

# for f in exec-fail/*.c; do
#     echo -n "."
#     asm=exec-fail/`basename $f .c`.s
#     rm -f $asm
#     max=`expr $max + 1`;
#     if compile $f && gcc -no-pie $asm; then
# 	score_comp=`expr $score_comp + 1`;
# 	if ./a.out > out; then
# 	    echo
# 	    echo "ECHEC : le code $f devrait échouer"
# 	else
# 	    score_test=`expr $score_test + 1`;
# 	    score_out=`expr $score_out + 1`;
# 	fi
#     else
# 	echo
# 	echo "ECHEC de la compilation sur $f (devrait réussir)"
#     fi
# done

# echo
# percent=`expr 100 \* $score / $max`;

# echo "Compilation:";
# percent=`expr 100 \* $score_comp / $max`;
# echo "Compilation : $score_comp/$max : $percent%";
# percent=`expr 100 \* $score_out / $max`;
# echo "Code produit : $score_out/$max : $percent%";
# percent=`expr 100 \* $score_test / $max`;
# echo "Comportement du code : $score_test/$max : $percent%";}

# partie 3i : tests d'exécution avec interprète

# partie3i () {

# score_out=0
# score_test=0
# max=0

# echo
# echo "Partie 3 (interprète)"
# echo "Execution normale"
# echo "-----------------"

# # timeout="why3-cpulimit 30 0 -h"

# for f in exec/*.c; do
#     echo -n "."
#     asm=exec/`basename $f .c`.s
#     rm -f $asm
#     expected=exec/`basename $f .c`.out
#     max=`expr $max + 1`;
#     rm -f out
#     if $compilo $f > out; then
# 	score_test=`expr $score_test + 1`;
# 	if cmp --quiet out $expected; then
# 	    score_out=`expr $score_out + 1`;
# 	else
# 	    echo
# 	    echo "ECHEC : mauvaise sortie pour $f"
# 	fi
#     else
# 	echo
# 	echo "ECHEC de l'interprétation sur $f (devrait réussir)"
#     fi
# done
# echo

# echo "Execution conduisant à un échec"
# echo "-------------------------------"

# for f in exec-fail/*.c; do
#     echo -n "."
#     asm=exec-fail/`basename $f .c`.s
#     rm -f $asm
#     max=`expr $max + 1`;
#     if $compilo $f > out; then
# 	echo
# 	echo "ECHEC : l'interprétation sur $f devrait échouer"
#     else
# 	score_test=`expr $score_test + 1`;
# 	score_out=`expr $score_out + 1`;
#     fi
# done

# echo "Interprétation :";
# percent=`expr 100 \* $score_test / $max`;
# echo "Fonctionnement : $score_test/$max : $percent%";
# percent=`expr 100 \* $score_out / $max`;
# echo "Sortie attendue : $score_out/$max : $percent%";}

case $option in
    "-1" )
        partie1;;
    "-2" )
        partie2;;
    # "-3" )
    #     partie3;;
    # "-i" )
    #     partie3i;;
    # "-v1" )
    #     verbose=1;
    #     partie1;;
    # "-v2" )
    # 	verbose=1;
    #     partie2;;
    # "-v3" )
    # 	verbose=1;
    #     partie3;;
    # "-all" )
    # 	partie1;
    # 	partie2;
    # 	partie3;;
    # "-gcc" )
    #     test_gcc;;
    * )
        echo "usage : $0 <option> <compilo>"
        echo "spécifier une option parmi : "
        echo "-1      : tester l'analyse syntaxique"
        echo "-2      : tester le typage";;
        # echo "-3      : tester la compilation"
        # echo "-v1     : tester l'analyse syntaxique (verbeusement)"
        # echo "-v2     : tester le typage (verbeusement)"
        # echo "-v3     : tester la compilation (verbeusement)"
        # echo "-all    : tout tester";;

esac
echo
